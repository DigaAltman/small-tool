# 指定连接的 kafka 集群
bootstrap.servers=122.51.126.135:9092

## @ACK 应答级别
#   对应值为 0
#       生产者只需要通过网络将消息发送出去, 只要发出去了, 就认为消息已经成功写入 KAFKA. 这样的操作会丢失一部分数据
#
#   对应值为 1
#       生产者通过网络将消息发送出去后, 确保 KAFKA 集群中的 LEADER 节点成功接收收据就算成功写入 KAFKA. 但是如果 LEADER 与 ASL 进行副本同步出现问题.
#       还是可能会丢失一部分数据
#
#   对应值为 all
#       生产者通过网络将消息发送出去后, 确保 KAFKA 集群中的 LEADER 节点 和所有的 ASL 都收到消息. 如果和 min.insync.replicas 参数结合起来，
#       就可以决定在返回确认前至少有多个副本能够收到消息。但是效率较低。可以通过一部模式和更大的批次来加快速度，但这样做会降低吞吐量
#
acks=all

# 重试次数
#
#  当发送失败时, 客户端会进行一定次数的重试. 具体的次数是我们指定的值, 默认是 0(失败后不进行重试), 如果设置 retries > 0 而没有设置 max.in.flight.requests.per.connection=1
#  则意味着放弃发送消息的顺序性. 默认重试间隔是 100ms, 可以通过 retry.backoff.ms 参数来修改这个时间间隔
retries=1

# 批次大小为 16K, 达到这个值后会写入 RecordAccumulator
#
#   跨网络的传输会增加应用响应的耗时, 为了提升应用响应速度. KAFKA 使用 batch.size 这个参数. 当发送多个消息到相同的分区时, 生产者会将相同分区下的消息打包在一起, 一次性发送出去
#   默认 batch.size 是 16KB, 较小的批次大小有可能降低吞吐量, 一个非常大的批次会占用服务器较大的内存.
#
batch.size=16384

# 等待时间
#
#   他的作用是为了解决 batch.size 设置的缓冲区空间没有被填满, 消息一直发不出去. 我们会给 linger.ms 设置一个时间差, 达到了这个时间差范围. 即便是数据没有达到 16KB, KAFKA 也会
#   将缓冲区内的数据发送出去
#
linger.ms=1

# RecordAccumulator 缓冲区大小 32M
#
#   KAFKA 的客户端发送数据到服务器，不是来一条就发一条，而是经过缓冲的，也就是说，通过 KafkaProducer 发送出去的消息都是先进入到客户端本地的内存缓冲里，然后把很多消息收集成一个一个的Batch，
#   再发送到Broker上去的，这样性能才可能高。
#
#   buffer.memory 的本质就是用来约束 KafkaProducer 能够使用的内存缓冲的大小的，默认值32MB。
#   如果buffer.memory设置的太小，可能导致的问题是：消息快速的写入内存缓冲里，但 Sender 线程来不及把 Request 发送到 Kafka 服务器，会造成内存缓冲很快就被写满。而一旦被写满，就会阻塞用户线程，不让继续往Kafka写消息了。
#
buffer.memory=33554432

# KAFKA 的键值序列化机制
key.serializer=org.apache.kafka.common.serialization.StringSerializer
value.serializer=org.apache.kafka.common.serialization.StringSerializer
